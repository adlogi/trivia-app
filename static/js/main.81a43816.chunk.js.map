{"version":3,"sources":["components/HomeScreen.jsx","components/Loading.jsx","components/Question.jsx","constants.js","components/Result.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["categories","animationOptions","loop","autoplay","rendererSettings","preserveAspectRatio","HomeScreen","str","category","onChangeCategory","level","onChangeLevel","onStartClick","Container","Row","Col","className","options","animationData","logo","width","isStopped","isPaused","xs","Button","variant","onClick","DropdownButton","title","Object","keys","map","key","Dropdown","Item","charAt","toUpperCase","slice","Loading","spinner","Question","props","applyHint","question","useHint","answers","document","querySelectorAll","hidden","i","Math","floor","random","textContent","decodeURIComponent","correct_answer","classList","contains","add","handleAnswer","e","index","score","setScore","endGame","target","setState","questionState","points","MAX_POINTS","ceil","state","timer","TIMER","this","console","debug","shuffle","incorrect_answers","interval","setInterval","prevProps","clearInterval","hintUsed","showNextQuestion","answer","indx","rightAnswer","React","Component","array","length","j","Result","outcome","onRestart","success","wrongAnswer","timesUp","App","useState","screen","setScreen","setLevel","setCategory","quiz","setQuiz","questionIndex","setQuestionIndex","setHintUsed","fetchQuiz","difficulty","url","fetch","then","res","json","data","results","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.81a43816.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types';\nimport Lottie from 'react-lottie';\nimport * as logo from '../media/11053-faq.json';\nimport { Container, Row, Col, Button, DropdownButton, Dropdown } from 'react-bootstrap';\n\n// Categories from OpenTriviaDB\n// https://opentdb.com/api_config.php\nconst categories = {\n  '9': 'General Knowledge',\n  '17': 'Science & Nature',\n  '18': 'Computers',\n  '23': 'History'\n}\n\nconst animationOptions = {\n  loop: true,\n  autoplay: true, \n  rendererSettings: {\n    preserveAspectRatio: 'xMidYMid slice'\n  }\n};\n\nexport default function HomeScreen({category, onChangeCategory, level, onChangeLevel, onStartClick}) {\n  return (\n    <Container>\n      <Row>\n        <Col className=\"mt-5 text-center\">\n          <Lottie\n            options={{\n              animationData: logo.default,\n              ...animationOptions\n            }}\n            width={'80%'}\n            isStopped={false}\n            isPaused={false}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"text-center\">\n          <h1>A Trivia Game</h1>\n        </Col>\n      </Row>\n      <Row>\n        <Col xs={10} className=\"offset-1 my-5 text-center\">\n          <Button variant=\"secondary w-100\" onClick={onStartClick}>GET STARTED</Button>\n        </Col>\n      </Row>\n      <Row>\n        <Col xs={10} className=\"offset-1 my-2 text-center\">\n          <DropdownButton title={categories[category]} variant=\"secondary w-100\">\n            {Object.keys(categories).map(key => \n              <Dropdown.Item key={key} onClick={() => onChangeCategory(key)} className=\"w-100\">{categories[key]}</Dropdown.Item>\n            )}\n          </DropdownButton>\n        </Col>\n      </Row>\n      <Row>\n        <Col xs={10} className=\"offset-1 my-2 text-center\">\n          <DropdownButton title={capitalizeFirst(level)} variant=\"secondary w-100\">\n            <Dropdown.Item onClick={() => onChangeLevel('easy')} className=\"w-100\">Easy</Dropdown.Item>\n            <Dropdown.Item onClick={() => onChangeLevel('medium')} className=\"w-100\">Medium</Dropdown.Item>\n            <Dropdown.Item onClick={() => onChangeLevel('hard')} className=\"w-100\">Hard</Dropdown.Item>\n          </DropdownButton>\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nHomeScreen.propTypes = {\n  category: PropTypes.string.isRequired,\n  onChangeCategory: PropTypes.func.isRequired,\n  level: PropTypes.string.isRequired,\n  onChangeLevel: PropTypes.func.isRequired,\n  onStartClick: PropTypes.func.isRequired\n}\n\nfunction capitalizeFirst(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}","import React from 'react';\nimport Lottie from 'react-lottie';\nimport * as spinner from '../media/15304-spinner.json';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nconst animationOptions = {\n  loop: true,\n  autoplay: true, \n  rendererSettings: {\n    preserveAspectRatio: 'xMidYMid slice'\n  }\n};\n\nexport default function Loading() {\n  return (\n    <Container className=\"h-100 d-flex\">\n      <Row className=\"my-auto\">\n        <Col xs={12} className=\"text-center\">\n          <Lottie\n            options={{\n              animationData: spinner.default,\n              ...animationOptions\n            }}\n            width={'80%'}\n            isStopped={false}\n            isPaused={false}\n          />\n        </Col>\n        <Col xs={12} className=\"text-center\">Loading...</Col>\n      </Row>\n    </Container>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Lottie from 'react-lottie';\nimport { QUESTIONS_COUNT, TIMER, MAX_POINTS } from '../constants'\nimport * as rightAnswer from '../media/433-checked-done.json';\nimport { Container, Row, Col, Button } from 'react-bootstrap';\n\nexport default class Question extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // questionState 'q': showing question\n      // questionState 'r': showing that right answer selected\n      questionState: 'q',\n      answers: [],\n      timer: TIMER\n    }\n    this.points = 0;\n  }\n\n  animationOptions = {\n    loop: false,\n    autoplay: true, \n    rendererSettings: {\n      preserveAspectRatio: 'xMidYMid slice'\n    }\n  };\n\n  componentDidMount() {\n    const { question, endGame } = this.props;\n    console.debug(question.correct_answer);\n    this.setState({\n      answers: shuffle([question.correct_answer, ...(question.incorrect_answers)])\n    });\n    this.interval = setInterval(() => {\n      if (this.state.questionState === 'q') {\n        if (this.state.timer > 1) {\n          this.setState({\n            timer: this.state.timer - 1\n          });\n        } else {\n          endGame('t');\n        }\n      }\n    }, 1000);\n  }\n\n  componentDidUpdate(prevProps) {\n    const { question } = this.props;\n    if (question.question !== prevProps.question.question) {\n      console.debug(question.correct_answer);\n      this.setState({\n        questionState: 'q',\n        answers: shuffle([question.correct_answer, ...(question.incorrect_answers)]),\n        timer: TIMER\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  applyHint = () => {\n    const { question, useHint } = this.props;\n    const answers = document.querySelectorAll('.answer>div>button');\n    let hidden = 0;\n    // randomly find two incorrect answers to hide\n    while (hidden < 2) {\n      const i = Math.floor(Math.random() * 4);\n      if (\n        answers[i].textContent !== decodeURIComponent(question.correct_answer) &&\n        !answers[i].classList.contains('invisible')\n      ) {\n        answers[i].classList.add('invisible');\n        hidden++;\n      }\n    }\n    useHint();\n  }\n\n  handleAnswer = e => {\n    const { index, question, score, setScore, endGame } = this.props;\n    const answer = e.target.textContent;\n    if (answer === decodeURIComponent(question.correct_answer)) {\n      if(QUESTIONS_COUNT === index + 1) {\n        endGame('s');\n      } else {\n        this.setState({\n          questionState: 'r'\n        });\n      }\n\n      // The time and points range is devided into (5) steps.\n      // When 20% of time pass, the player loses 20% of the points.\n      const STEPS = 5;\n      const timeStep = TIMER / STEPS;\n      const pointsStep = MAX_POINTS / STEPS;\n      this.points = Math.ceil(this.state.timer / timeStep) * pointsStep;\n      setScore(score + this.points);\n    } else {\n      endGame('w');\n    }\n  }\n\n  render() {\n    const { index, question, hintUsed, score, showNextQuestion } = this.props;\n\n    if (this.state.questionState === 'q') {\n      // show a new question\n      return (\n        <Container>\n          <Row className=\"bg-info header\">\n            <Col className=\"d-flex align-items-center text-center\">Question {index + 1}/{10}</Col>\n            <Col className=\"d-flex align-items-center text-center\">{score} Points</Col>\n            <Col className=\"d-flex align-items-center text-center\">Remaining Time: {this.state.timer}</Col>\n          </Row>\n          <Row>\n            <Col xs={10} className=\"offset-1 text-center mt-2 mb-5\">\n              {decodeURIComponent(question.question)}\n            </Col>\n          </Row>\n          {this.state.answers.map((answer, indx) => (\n            <Row key={indx} className=\"answer\">\n              <Col xs={10} className=\"offset-1 p-2 text-center\">\n                <Button\n                  variant=\"secondary w-100\"\n                  onClick={this.handleAnswer}\n                >\n                  {decodeURIComponent(answer)}\n                </Button>\n              </Col>\n            </Row>\n          ))}\n          {!hintUsed ? (\n            <Row className=\"mt-5\">\n              <Col xs={10} className=\"offset-1 p-2 text-center\">\n                <Button variant=\"info w-100\" onClick={this.applyHint}>50:50 Hint!</Button>\n              </Col>\n            </Row>\n          ) : null}\n        </Container>\n      )\n    } else {\n      // if the right answer selected, show new score\n      return (\n        <Container>\n          <Row className=\"bg-info header\">\n            <Col xs={4} className=\"d-flex align-items-center text-center\">Question {index + 1}/{10}</Col>\n          </Row>\n          <Row>\n            <Col xs={10} className=\"offset-1 text-center\">\n              <Lottie\n                options={{\n                  animationData: rightAnswer.default,\n                  ...this.animationOptions\n                }}\n                width={'60%'}\n                isStopped={false}\n                isPaused={false}\n              />\n            </Col>\n            <Col xs={10} className=\"offset-1 text-center\">\n              Correct!\n            </Col>\n            <Col xs={10} className=\"offset-1 text-center\">\n              You have earned {this.points} points<br/>\n              Total: {score} points\n            </Col>\n          </Row>\n          <Row>\n            <Col xs={10} className=\"offset-1 p-2 text-center\">\n              <Button variant=\"secondary w-100\" onClick={showNextQuestion}>Next Question</Button>\n            </Col>\n          </Row>\n        </Container>\n      );\n    }\n  }\n}\n\nQuestion.propTypes = {\n  index: PropTypes.number.isRequired,\n  question: PropTypes.shape({\n    question: PropTypes.string,\n    correct_answer: PropTypes.string,\n    incorrect_answers: PropTypes.arrayOf(PropTypes.string)\n  }).isRequired,\n  hintUsed: PropTypes.bool.isRequired,\n  score: PropTypes.number.isRequired,\n  useHint: PropTypes.func.isRequired,\n  setScore: PropTypes.func.isRequired,\n  showNextQuestion: PropTypes.func.isRequired,\n  endGame: PropTypes.func.isRequired,\n}\n\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n","export const QUESTIONS_COUNT = 10;\nexport const TIMER = 15;\nexport const MAX_POINTS = 100;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Lottie from 'react-lottie';\nimport * as timesUp from '../media/6640-times-up.json';\nimport * as wrongAnswer from '../media/4698-wrong-answer.json';\nimport * as success from '../media/10193-cup.json';\nimport { Container, Row, Col, Button } from 'react-bootstrap';\n\nconst animationOptions = {\n  loop: false,\n  autoplay: true, \n  rendererSettings: {\n    preserveAspectRatio: 'xMidYMid slice'\n  }\n};\n\nexport default function Result({outcome, score, onRestart}) {\n  if (outcome === 's') {\n    return (\n      <Container>\n        <Row>\n          <Col xs={10} className=\"offset-1 text-center mt-5\">\n            <Lottie\n              options={{\n                animationData: success.default,\n                ...animationOptions\n              }}\n              width={'60%'}\n              isStopped={false}\n              isPaused={false}\n            />\n          </Col>\n          <Col xs={10} className=\"offset-1 text-center\">\n            You finished the quiz successfully!\n          </Col>\n          <Col xs={10} className=\"offset-1 text-center\">\n            Total: {score} points\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={10} className=\"offset-1 p-2 text-center\">\n            <Button variant=\"secondary w-100\" onClick={onRestart}>Start a New Quiz</Button>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n  if (outcome === 'w' || outcome === 't') {\n    return (\n      <Container>\n        <Row>\n          {outcome === 'w' ? \n            <>\n              <Col xs={10} className=\"offset-1 text-center mt-5\">\n                <Lottie\n                  options={{\n                    animationData: wrongAnswer.default,\n                    ...animationOptions\n                  }}\n                  width={'60%'}\n                  isStopped={false}\n                  isPaused={false}\n                />\n              </Col>\n                <Col xs={10} className=\"offset-1 text-center\">\n                  Wrong answer!\n                </Col>\n              </>\n            :\n            <Col xs={10} className=\"offset-1 text-center mt-5\">\n              <Lottie\n                options={{\n                  animationData: timesUp.default,\n                  ...animationOptions\n                }}\n                width={'60%'}\n                isStopped={false}\n                isPaused={false}\n              />\n            </Col>\n          }\n          <Col xs={10} className=\"offset-1 text-center\">\n            Total: {score} points\n          </Col>\n        </Row>\n        <Row>\n          <Col xs={10} className=\"offset-1 p-2 text-center\">\n            <Button variant=\"secondary w-100\" onClick={onRestart}>Start a New Quiz</Button>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nResult.propTypes = {\n  outcome: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  onRestart: PropTypes.func.isRequired,\n}\n","import React, { useState } from 'react';\nimport HomeScreen from './components/HomeScreen';\nimport Loading from './components/Loading';\nimport Question from './components/Question';\nimport Result from './components/Result';\nimport { QUESTIONS_COUNT } from './constants'\nimport './App.css';\n\nfunction App() {\n  // screen 'i': intro\n  // screen 'f': fetching data\n  // screen 'p': still playing\n  // screen 's': success\n  // screen 'w': wrong answer\n  // screen 't': time's up!\n  const [screen, setScreen] = useState('i');\n  // Difficulty level of the quiz\n  const [level, setLevel] = useState('easy');\n  // Quiz questions category\n  const [category, setCategory] = useState('9');\n  // quiz questions/answers as retrieved from triviaDB\n  const [quiz, setQuiz] = useState(null);\n  // questionIndex: 0 ... <QUESTIONS_COUNT> - 1\n  const [questionIndex, setQuestionIndex] = useState(0);\n  // Total score\n  const [score, setScore] = useState(0);\n  // Has hint been used (available only once)\n  const [hintUsed, setHintUsed] = useState(false);\n\n  // Show home screen again to start a new quiz\n  const restart = () => {\n    setScreen('i');\n    setQuiz(null);\n    setQuestionIndex(0);\n    setScore(0);\n    setHintUsed(false);\n  }\n\n  const handleStartClick = () => {\n    setScreen('f');\n    fetchQuiz(level, category);\n  }\n\n  const fetchQuiz = (difficulty = 'easy', category = '9') => {\n    // example: https://opentdb.com/api.php?amount=10&category=9&difficulty=easy&type=multiple&encode=url3986\n    const url = `https://opentdb.com/api.php?amount=${QUESTIONS_COUNT}&category=${category}&difficulty=${difficulty}&type=multiple&encode=url3986`;\n    console.debug(url);\n    fetch(url)\n      .then(res => res.json())\n      .then(data => {\n        setQuiz(data.results);\n        setQuestionIndex(0);\n        setScreen('p');\n      });\n  }\n\n  switch (screen) {\n    // fetching quiz\n    case 'f':\n      return (<Loading />);\n    // playing, showing questions\n    case 'p':\n      return (\n        <Question\n          index={questionIndex}\n          question={quiz[questionIndex]}\n          hintUsed={hintUsed}\n          score={score}\n          useHint={() => setHintUsed(true)}\n          setScore={setScore}\n          showNextQuestion={() => setQuestionIndex(questionIndex + 1)}\n          endGame={setScreen}\n        />\n      );\n    case 's':   // game ends: success\n    case 'w':   // game ends: wrong answer\n    case 't':   // game ends: time's up\n      return (\n        <Result outcome={screen} score={score} onRestart={restart}></Result>\n      );\n    // game intro\n    case 'i':\n    default:\n      return (\n        <HomeScreen\n          category={category}\n          onChangeCategory={setCategory}\n          level={level}\n          onChangeLevel={setLevel}\n          onStartClick={handleStartClick}\n        />\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}